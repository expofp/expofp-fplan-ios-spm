// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name ExpoFpFplan
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import ExpoFpCommon
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class FSWebView : WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Bookmark : Swift.Codable {
  public let name: Swift.String?
  public let externalId: Swift.String?
  public let bookmarked: Swift.Bool
  public init(name: Swift.String?, externalId: Swift.String?, bookmarked: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Layer : Swift.Decodable {
  public let name: Swift.String
  public let description: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
extension ExpoFpFplan.UIFplanView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
public struct Helper {
  public static func toJsonString(waypoints: [ExpoFpFplan.RouteWaypoint]) -> Swift.String
  public static func getCurrentPosition(_ dictionary: Foundation.NSDictionary) -> ExpoFpFplan.CurrentPosition
  public static func createWebView() -> ExpoFpFplan.FSWebView
  public static func unzip(_ zipFilePath: Swift.String) -> Foundation.URL?
  public static func downloadZipToCache(_ url: Swift.String, callback: @escaping (_ htmlFilePath: Foundation.URL?, _ error: Swift.String?) -> Swift.Void)
  public static func getFirstChildPathUrl(_ filePath: Foundation.URL) -> Foundation.URL?
  public static func isValidUrl(_ url: Swift.String) -> Swift.Bool
  public static func getEventAddress(_ url: Swift.String) -> Swift.String
  public static func getFormatUrl(_ url: Swift.String, settings: ExpoFpFplan.Settings) -> Swift.String
  public static func getFormatParams(params: Swift.String? = nil, settings: ExpoFpFplan.Settings) -> Swift.String
  public static func getParams(_ url: Swift.String) -> Swift.String
  public static func getEventId(_ url: Swift.String) -> Swift.String
  public static func downloadFile(_ url: Foundation.URL, _ filePath: Foundation.URL, _ completionHandler: ((_ error: (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func getCacheDirectory() -> Foundation.URL
  public static func getDisableGpsParametr(urlString: Swift.String, settings: ExpoFpFplan.Settings) -> Swift.String
  public static func getAllowConsentParametr(string: Swift.String, settings: ExpoFpFplan.Settings) -> Swift.String
  public static func getLayer(_ nsDictionary: Foundation.NSDictionary) -> ExpoFpFplan.Layer?
  public static func getLoadingPageHtml() -> Swift.String
}
public struct FileInfo : Swift.Codable {
  public let name: Swift.String
  public let serverUrl: Swift.String
  public let cachePath: Swift.String
  public let version: Swift.String
  public init(name: Swift.String, serverUrl: Swift.String, cachePath: Swift.String, version: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ExpoFpFplan.UIFplanView {
  @_Concurrency.MainActor @preconcurrency public func setOnFpReadyCallback(_ callback: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnFpErrorCallback(_ callback: @escaping @_Concurrency.MainActor (_ errorCode: Swift.Int, _ description: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnBoothClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ booth: ExpoFpFplan.FloorPlanBoothBase) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnBuildDirectionCallback(_ callback: @escaping @_Concurrency.MainActor (_ direction: ExpoFpFplan.Direction) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnMessageReceivedCallback(_ callback: @escaping @_Concurrency.MainActor (_ message: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnDetailsClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ details: ExpoFpFplan.Details?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnBookmarkClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ bookmark: ExpoFpFplan.Bookmark) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnCategoryClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ category: ExpoFpFplan.Category) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnExhibitorCustomButtonClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ externalId: Swift.String, _ buttonNumber: Swift.Int, _ buttonUrl: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnCurrentFloorChangedCallback(_ callback: @escaping @_Concurrency.MainActor (_ floor: ExpoFpFplan.ExpoFpFloor) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnCurrentPositionChangedCallback(_ callback: @escaping @_Concurrency.MainActor (_ location: ExpoFpFplan.BlueDotPoint) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnFestMoreDetailsClickCallback(_ callback: @escaping @_Concurrency.MainActor (_ id: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setOnFestDirectionsClick(_ callback: @escaping @_Concurrency.MainActor (_ id: Swift.String, _ url: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func load(_ url: Swift.String, locationProvider: (any ExpoFpCommon.LocationProvider)? = nil, useGlobalLocationProvider: Swift.Bool = false, focusOnLocation: Swift.Bool = false, focusOnFirstLocation: Swift.Bool = false, allowConsent: Swift.Bool = false, loadingTimeout: Swift.Double = 20.0)
  @_Concurrency.MainActor @preconcurrency public func openZip(_ zipFilePath: Swift.String, params: Swift.String? = nil, locationProvider: (any ExpoFpCommon.LocationProvider)? = nil, useGlobalLocationProvider: Swift.Bool = false, focusOnLocation: Swift.Bool = false, focusOnFirstLocation: Swift.Bool = false, allowConsent: Swift.Bool = false, loadingTimeout: Swift.Double = 20.0)
  @_Concurrency.MainActor @preconcurrency public func downloadZipToCache(_ url: Swift.String, callback: @escaping (_ htmlFilePath: Foundation.URL?, _ error: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func unzip(_ zipFilePath: Swift.String) -> Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public static func getFilePathFromCache() -> Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public func openFileFromCache(params: Swift.String? = nil, settings: ExpoFpFplan.Settings = .init())
  @_Concurrency.MainActor @preconcurrency public func openZip(_ zipFilePath: Swift.String, params: Swift.String? = nil, settings: ExpoFpFplan.Settings = .init())
  @_Concurrency.MainActor @preconcurrency public func destoy()
  @_Concurrency.MainActor @preconcurrency public func selectExhibitor(_ exhibitorName: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func selectExhibitor(_ exhibitorNames: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func selectBooth(_ boothName: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func selectCategory(_ nameOrSlug: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(_ route: ExpoFpFplan.Route?)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(from: ExpoFpFplan.SelectRoutePoint, to: Swift.String, exceptInaccessible: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(from: Swift.String, to: ExpoFpFplan.SelectRoutePoint, exceptInaccessible: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(from: ExpoFpFplan.SelectRoutePoint, to: ExpoFpFplan.SelectRoutePoint, exceptInaccessible: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func selectRoute(waypoints: [ExpoFpFplan.RouteWaypoint])
  @_Concurrency.MainActor @preconcurrency public func getOptimizedRoutes(waypoints: [ExpoFpFplan.RouteWaypoint], _ completionHandler: @escaping (_ routes: [ExpoFpFplan.RouteInfo]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func getVisibility(_ completionHandler: @escaping (_ visibility: ExpoFpFplan.ExpoFpVisibility) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setVisibility(_ visibility: ExpoFpFplan.ExpoFpVisibility)
  @_Concurrency.MainActor @preconcurrency public func findLocation()
  @_Concurrency.MainActor @preconcurrency public func zoomIn()
  @_Concurrency.MainActor @preconcurrency public func zoomOut()
  @_Concurrency.MainActor @preconcurrency public func switchView()
  @_Concurrency.MainActor @preconcurrency public func fitBounds()
  @_Concurrency.MainActor @preconcurrency public func applyParameters(_ parameters: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavaScript(_ jsCode: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavaScript(_ js: Swift.String, completionHandler: (@_Concurrency.MainActor @Sendable (Any?, (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func setCurrentPosition(_ position: ExpoFpFplan.BlueDotPoint?, _ focus: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func getFloors(_ completionHandler: @escaping (_ floors: [ExpoFpFplan.ExpoFpFloor]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func activateFloor(_ floor: ExpoFpFplan.ExpoFpFloor)
  @_Concurrency.MainActor @preconcurrency public func updateLayerVisibility(layer: Swift.String, visible: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setBookmarks(bookmarks: [ExpoFpFplan.Bookmark])
  @_Concurrency.MainActor @preconcurrency public func highlightBooths(externalIds: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func highlightExhibitors(externalIds: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func clear()
  @_Concurrency.MainActor @preconcurrency public func exhibitorsList(_ completionHandler: @escaping (_ exhibitors: [ExpoFpFplan.Exhibitor]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func categoriesList(_ completionHandler: @escaping (_ categories: [ExpoFpFplan.Category]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func boothsList(_ completionHandler: @escaping (_ booths: [ExpoFpFplan.FloorPlanBooth]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func search(_ text: Swift.String, _ completionHandler: @escaping (_ items: [ExpoFpFplan.ListItem]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func getUrl() -> Foundation.URL?
}
@_Concurrency.MainActor @preconcurrency public struct FplanView : ExpoFpFplan.FplanViewProtocol {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func getUIFplanView() -> ExpoFpFplan.UIFplanView
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: ExpoFpFplan.FplanView.Context) -> ExpoFpFplan.UIFplanView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ webView: ExpoFpFplan.UIFplanView, context: ExpoFpFplan.FplanView.Context)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: ExpoFpFplan.UIFplanView, coordinator: ())
  public typealias Body = Swift.Never
  public typealias Coordinator = ()
  public typealias UIViewType = ExpoFpFplan.UIFplanView
}
@objc @_Concurrency.MainActor @preconcurrency open class UIFplanView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency public func load(_ url: Swift.String, settings: ExpoFpFplan.Settings = .init())
  @_Concurrency.MainActor @preconcurrency public func openFile(with offlinePlanInfo: ExpoFpFplan.ExpoFpOfflinePlanInfo, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public func openFile(htmlFilePathUrl: Foundation.URL, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @objc deinit
}
public struct FestDirectionsClickEvent : Swift.Decodable {
  public let id: Swift.String
  public let url: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct Route : Swift.Equatable {
  public let from: Swift.String
  public let to: Swift.String
  public let exceptInaccessible: Swift.Bool
  public init(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool)
  public static func == (r1: ExpoFpFplan.Route, r2: ExpoFpFplan.Route) -> Swift.Bool
}
public struct Line {
  public let startPoint: ExpoFpFplan.Point
  public let endPoint: ExpoFpFplan.Point
  public let weight: Swift.Int
}
public enum RouteWaypointValueType {
  case String, CurrentPosition
  public static func == (a: ExpoFpFplan.RouteWaypointValueType, b: ExpoFpFplan.RouteWaypointValueType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RouteWaypoint {
  public let valueType: ExpoFpFplan.RouteWaypointValueType
  public let stringValue: Swift.String?
  public let currentPositionValue: ExpoFpFplan.CurrentPosition?
  public init(_ value: Swift.String)
  public init(_ value: ExpoFpFplan.CurrentPosition)
  public func toJsonString() -> Swift.String?
}
public struct FloorPlanBoothClickEvent : Swift.Decodable {
  public let target: ExpoFpFplan.FloorPlanBoothBase
  public init(from decoder: any Swift.Decoder) throws
}
public struct Settings {
  public let locationProvider: (any ExpoFpCommon.LocationProvider)?
  public let useGlobalLocationProvider: Swift.Bool
  public let focusOnLocation: Swift.Bool
  public let focusOnFirstLocation: Swift.Bool
  public let allowConsent: Swift.Bool
  public let loadingTimeout: Swift.Double
  public init(locationProvider: (any ExpoFpCommon.LocationProvider)? = nil, useGlobalLocationProvider: Swift.Bool = false, focusOnLocation: Swift.Bool = false, focusOnFirstLocation: Swift.Bool = false, allowConsent: Swift.Bool = false, loadingTimeout: Swift.Double = 20.0)
}
public struct ExpoFpOfflinePlanInfo : Swift.Equatable {
  public let expoKey: Swift.String
  public let version: Swift.Int
  public static func == (a: ExpoFpFplan.ExpoFpOfflinePlanInfo, b: ExpoFpFplan.ExpoFpOfflinePlanInfo) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SharedUIFplanView : ExpoFpFplan.UIFplanView {
  @_Concurrency.MainActor @preconcurrency public static func createSharedWebView() -> ExpoFpFplan.FSWebView
  @_Concurrency.MainActor @preconcurrency public static func destroySharedView()
  @_Concurrency.MainActor @preconcurrency public static func preload(_ url: Swift.String, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public static func preloadFile(htmlFilePathUrl: Foundation.URL, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public static func preloadFileFromCache(params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency override open func load(_ url: Swift.String, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency override open func openFile(htmlFilePathUrl: Foundation.URL, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency open func dispose()
  @_Concurrency.MainActor @preconcurrency open func destroyView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct SharedFplanView : ExpoFpFplan.FplanViewProtocol {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func getUIFplanView() -> ExpoFpFplan.UIFplanView
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: ExpoFpFplan.SharedFplanView.Context) -> ExpoFpFplan.SharedUIFplanView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ webView: ExpoFpFplan.SharedUIFplanView, context: ExpoFpFplan.SharedFplanView.Context)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: ExpoFpFplan.SharedUIFplanView, coordinator: ())
  @_Concurrency.MainActor @preconcurrency public static func preload(_ url: Swift.String, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public static func preloadFile(htmlFilePathUrl: Foundation.URL, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public static func preloadFileFromCache(params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  @_Concurrency.MainActor @preconcurrency public static func destroySharedView()
  public typealias Body = Swift.Never
  public typealias Coordinator = ()
  public typealias UIViewType = ExpoFpFplan.SharedUIFplanView
}
public struct FestMoreDetailsClickEvent : Swift.Decodable {
  public let id: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExpoFpFloor : Swift.Codable, Swift.Hashable {
  public let name: Swift.String
  public let shortName: Swift.String
  public let description: Swift.String
  public let index: Swift.Int
  public let isActive: Swift.Bool
  public let isDisabled: Swift.Bool
  public static func == (a: ExpoFpFplan.ExpoFpFloor, b: ExpoFpFplan.ExpoFpFloor) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension ExpoFpFplan.UIFplanView : ExpoFpCommon.LocationProviderDelegate {
  @_Concurrency.MainActor @preconcurrency public func didUpdateLocation(location: ExpoFpCommon.Location)
  @_Concurrency.MainActor @preconcurrency public func didStartSuccess()
  @_Concurrency.MainActor @preconcurrency public func didStartFailure(reason: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func didStopSuccess()
  @_Concurrency.MainActor @preconcurrency public func didStopFailure(reason: Swift.String)
}
public struct RouteInfo {
  public let waypoints: [ExpoFpFplan.RouteWaypoint]
}
public enum ExpoFpNetworkError : Swift.Error {
  case badUrl
  case serverError
  public static func == (a: ExpoFpFplan.ExpoFpNetworkError, b: ExpoFpFplan.ExpoFpNetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CurrentPosition {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.String?
  public let zValueIsDigit: Swift.Bool
  public func toJsonString() -> Swift.String?
  public init(x: Swift.Double, y: Swift.Double, z: Swift.String?, zValueIsDigit: Swift.Bool)
}
extension ExpoFpFplan.UIFplanView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
public struct Exhibitor : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public let externalId: Swift.String?
  public let booths: [Swift.Int]
  public init(from decoder: any Swift.Decoder) throws
}
public struct Details : Swift.Decodable {
  public let id: Swift.Int?
  public let type: Swift.String
  public let name: Swift.String?
  public let externalId: Swift.String?
  public let boothsNames: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
}
public protocol FplanViewProtocol : SwiftUI.UIViewRepresentable {
  func getUIFplanView() -> ExpoFpFplan.UIFplanView
}
extension ExpoFpFplan.FplanViewProtocol {
  public func onFpReady(_ callback: @escaping () -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onFpError(_ callback: @escaping (_ errorCode: Swift.Int, _ description: Swift.String) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onBoothClick(_ callback: @escaping (_ booth: ExpoFpFplan.FloorPlanBoothBase) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onBuildDirection(_ callback: @escaping (_ direction: ExpoFpFplan.Direction?) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onMessageReceived(_ callback: @escaping (_ message: Swift.String?) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onDetailsClick(_ callback: @escaping (_ details: ExpoFpFplan.Details?) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onBookmarkClick(_ callback: @escaping (_ bookmark: ExpoFpFplan.Bookmark) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onCategoryClick(_ callback: @escaping (_ category: ExpoFpFplan.Category) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onExhibitorCustomButtonClick(_ callback: @escaping (_ externalId: Swift.String, _ buttonNumber: Swift.Int, _ buttonUrl: Swift.String) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onCurrentFloorChangedCallback(_ callback: @escaping @_Concurrency.MainActor (_ floor: ExpoFpFplan.ExpoFpFloor) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onCurrentPositionChanged(_ callback: @escaping (_ location: ExpoFpFplan.BlueDotPoint) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onFestMoreDetailsClick(_ callback: @escaping (_ id: Swift.String) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func onFestDirectionsClick(_ callback: @escaping (_ id: Swift.String, _ url: Swift.String) -> Swift.Void) -> some ExpoFpFplan.FplanViewProtocol
  
  public func load(_ url: Swift.String, settings: ExpoFpFplan.Settings = .init())
  public func load(_ url: Swift.String, locationProvider: (any ExpoFpCommon.LocationProvider)? = nil, useGlobalLocationProvider: Swift.Bool = false, focusOnLocation: Swift.Bool = false, focusOnFirstLocation: Swift.Bool = false, allowConsent: Swift.Bool = false, loadingTimeout: Swift.Double = 20.0)
  public func openZip(_ zipFilePath: Swift.String, params: Swift.String? = nil, settings: ExpoFpFplan.Settings = .init())
  public func openZip(_ zipFilePath: Swift.String, params: Swift.String? = nil, locationProvider: (any ExpoFpCommon.LocationProvider)? = nil, useGlobalLocationProvider: Swift.Bool = false, focusOnLocation: Swift.Bool = false, focusOnFirstLocation: Swift.Bool = false, allowConsent: Swift.Bool = false, loadingTimeout: Swift.Double = 20.0)
  public static func getFilePathFromCache() -> Foundation.URL?
  public func openFileFromCache(params: Swift.String? = nil, settings: ExpoFpFplan.Settings = .init())
  public func openFile(with offlinePlanInfo: ExpoFpFplan.ExpoFpOfflinePlanInfo, params: Swift.String? = nil, settings: ExpoFpFplan.Settings = .init())
  public func openFile(htmlFilePathUrl: Foundation.URL, params: Swift.String? = nil, settings: ExpoFpFplan.Settings)
  public func downloadZipToCache(_ url: Swift.String, callback: @escaping (_ htmlFilePath: Foundation.URL?, _ error: Swift.String?) -> Swift.Void)
  public func destoy()
  public func selectExhibitor(_ exhibitorName: Swift.String?)
  public func selectExhibitor(_ exhibitorNames: [Swift.String])
  public func selectBooth(_ boothName: Swift.String?)
  public func selectCategory(_ nameOrSlug: Swift.String?)
  public func selectRoute(_ route: ExpoFpFplan.Route?)
  public func selectRoute(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool = false)
  public func selectRoute(from: ExpoFpFplan.SelectRoutePoint, to: Swift.String, exceptInaccessible: Swift.Bool = false)
  public func selectRoute(from: Swift.String, to: ExpoFpFplan.SelectRoutePoint, exceptInaccessible: Swift.Bool = false)
  public func selectRoute(from: ExpoFpFplan.SelectRoutePoint, to: ExpoFpFplan.SelectRoutePoint, exceptInaccessible: Swift.Bool = false)
  public func selectRoute(waypoints: [ExpoFpFplan.RouteWaypoint])
  public func getOptimizedRoutes(waypoints: [ExpoFpFplan.RouteWaypoint], _ completionHandler: @escaping (_ routes: [ExpoFpFplan.RouteInfo]) -> Swift.Void)
  public func setCurrentPosition(_ position: ExpoFpFplan.BlueDotPoint?, _ focus: Swift.Bool = false)
  public func getFloors(_ completionHandler: @escaping (_ floors: [ExpoFpFplan.ExpoFpFloor]) -> Swift.Void)
  public func activateFloor(_ floor: ExpoFpFplan.ExpoFpFloor)
  public func updateLayerVisibility(layer: Swift.String, visible: Swift.Bool)
  public func setBookmarks(bookmarks: [ExpoFpFplan.Bookmark])
  public func highlightBooths(externalIds: [Swift.String])
  public func highlightExhibitors(externalIds: [Swift.String])
  public func clear()
  public func exhibitorsList(_ completionHandler: @escaping (_ exhibitors: [ExpoFpFplan.Exhibitor]) -> Swift.Void)
  public func categoriesList(_ completionHandler: @escaping (_ categories: [ExpoFpFplan.Category]) -> Swift.Void)
  public func boothsList(_ completionHandler: @escaping (_ booths: [ExpoFpFplan.FloorPlanBooth]) -> Swift.Void)
  public func search(_ text: Swift.String, _ completionHandler: @escaping (_ items: [ExpoFpFplan.ListItem]) -> Swift.Void)
  public func getVisibility(_ completionHandler: @escaping (_ visibility: ExpoFpFplan.ExpoFpVisibility) -> Swift.Void)
  public func setVisibility(_ visibility: ExpoFpFplan.ExpoFpVisibility)
  public func findLocation()
  public func zoomIn()
  public func zoomOut()
  public func switchView()
  public func fitBounds()
  public func applyParameters(_ parameters: Swift.String)
  public func getUrl() -> Foundation.URL?
}
public struct ExpoFpHelper {
  public static func search(_ text: Swift.String, categotires: [ExpoFpFplan.Category], exhibitors: [ExpoFpFplan.Exhibitor], booths: [ExpoFpFplan.FloorPlanBooth]) -> [ExpoFpFplan.ListItem]
}
public struct FloorPlanBooth : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public let layer: ExpoFpFplan.Layer?
  public let externalId: Swift.String?
  public let isSpecial: Swift.Bool
  public let exhibitors: [Swift.Int]
  public init(from decoder: any Swift.Decoder) throws
}
public enum ListItemType {
  case Category, Exhibitor, Booth
  public static func == (a: ExpoFpFplan.ListItemType, b: ExpoFpFplan.ListItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ListItem {
  public let order: Swift.Int
  public let type: ExpoFpFplan.ListItemType
  public let categoryValue: ExpoFpFplan.Category?
  public let exhibitorValue: ExpoFpFplan.Exhibitor?
  public let boothValue: ExpoFpFplan.FloorPlanBooth?
  public func getDisplayName() -> Swift.String
}
public struct BlueDotPoint : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Double?
  public let y: Swift.Double?
  public let z: Swift.String?
  public let zValueIsDigit: Swift.Bool
  public let angle: Swift.Double?
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(x: Swift.Double? = nil, y: Swift.Double? = nil, z: Swift.String? = nil, zValueIsDigit: Swift.Bool = false, angle: Swift.Double? = nil, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil)
  public static func == (a: ExpoFpFplan.BlueDotPoint, b: ExpoFpFplan.BlueDotPoint) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public typealias ExpoFpOfflinePlanInfoResult = Swift.Result<ExpoFpFplan.ExpoFpOfflinePlanInfo, any Swift.Error>
public typealias ExpoFpOfflinePlansInfoResult = Swift.Result<[ExpoFpFplan.ExpoFpOfflinePlanInfo], any Swift.Error>
public enum ExpoFpOfflinePlanInfoLoader {
  public static func loadPlanToCacheDirectory(with expoKey: Swift.String, completion: @escaping (ExpoFpFplan.ExpoFpOfflinePlanInfoResult) -> Swift.Void)
  public static func loadPlanToCacheDirectory(with expoKey: Swift.String) async -> ExpoFpFplan.ExpoFpOfflinePlanInfoResult
  public static func getLoadedPlansInfo(completion: @escaping ([ExpoFpFplan.ExpoFpOfflinePlanInfo]) -> Swift.Void)
  public static func getLoadedPlansInfo() async -> [ExpoFpFplan.ExpoFpOfflinePlanInfo]
  public static func removeLoadedPlan(with planInfo: ExpoFpFplan.ExpoFpOfflinePlanInfo)
  public static func removeAllLoadedPlans()
}
public struct FloorPlanCustomButtonEvent : Swift.Decodable {
  public let externalId: Swift.String
  public let buttonNumber: Swift.Int
  public let buttonUrl: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExpoFpVisibility : Swift.Codable {
  public let controls: Swift.Bool?
  public let levels: Swift.Bool?
  public let header: Swift.Bool?
  public let overlay: Swift.Bool?
  public init(controls: Swift.Bool? = nil, levels: Swift.Bool? = nil, header: Swift.Bool? = nil, overlay: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Point : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Int
  public let y: Swift.Int
  public let layer: Swift.String?
  public init(x: Swift.Int, y: Swift.Int, layer: Swift.String?)
  public static func == (p1: ExpoFpFplan.Point, p2: ExpoFpFplan.Point) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct SelectRoutePoint : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Double?
  public let y: Swift.Double?
  public let z: Swift.String?
  public let zValueIsDigit: Swift.Bool
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(x: Swift.Double? = nil, y: Swift.Double? = nil, z: Swift.String? = nil, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil)
  public init(x: Swift.Double? = nil, y: Swift.Double? = nil, z: Swift.String? = nil, zValueIsDigit: Swift.Bool = false, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil)
  public func toJson() -> Swift.String
  public static func == (a: ExpoFpFplan.SelectRoutePoint, b: ExpoFpFplan.SelectRoutePoint) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
open class NetworkReachability {
  public init()
  public func checkConnection() -> Swift.Bool
  @objc deinit
}
public struct FloorPlanBoothBase : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public let externalId: Swift.String?
  public let layer: ExpoFpFplan.Layer?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Category : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public let exhibitors: [Swift.Int]
  public init(from decoder: any Swift.Decoder) throws
}
public struct Direction {
  public let distance: Swift.String
  public let duration: Foundation.TimeInterval
  public let from: ExpoFpFplan.FloorPlanBoothBase?
  public let to: ExpoFpFplan.FloorPlanBoothBase?
  public let lines: [ExpoFpFplan.Line]
}
extension ExpoFpFplan.FplanView : Swift.Sendable {}
extension ExpoFpFplan.RouteWaypointValueType : Swift.Equatable {}
extension ExpoFpFplan.RouteWaypointValueType : Swift.Hashable {}
extension ExpoFpFplan.SharedFplanView : Swift.Sendable {}
extension ExpoFpFplan.ExpoFpNetworkError : Swift.Equatable {}
extension ExpoFpFplan.ExpoFpNetworkError : Swift.Hashable {}
extension ExpoFpFplan.ListItemType : Swift.Equatable {}
extension ExpoFpFplan.ListItemType : Swift.Hashable {}
